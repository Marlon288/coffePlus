[{"C:\\Users\\marlo\\coffePlus\\app\\pages\\index.tsx":"1","C:\\Users\\marlo\\coffePlus\\app\\pages\\_app.tsx":"2","C:\\Users\\marlo\\coffePlus\\app\\components\\map.tsx":"3","C:\\Users\\marlo\\coffePlus\\app\\components\\places.tsx":"4"},{"size":332,"mtime":1650565453909,"results":"5","hashOfConfig":"6"},{"size":310,"mtime":1650565453891,"results":"7","hashOfConfig":"6"},{"size":5803,"mtime":1650567122670,"results":"8","hashOfConfig":"6"},{"size":1271,"mtime":1649294024907,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yz0ant",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\marlo\\coffePlus\\app\\pages\\index.tsx",[],[],"C:\\Users\\marlo\\coffePlus\\app\\pages\\_app.tsx",[],[],"C:\\Users\\marlo\\coffePlus\\app\\components\\map.tsx",["23","24"],[],"import { useState, useMemo, useCallback, useRef } from \"react\";\nimport {\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n  Circle,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport Places from \"./places\";\nimport { hrtime } from \"process\";\nimport logo from \"../../css/images/coffeepluseLOGO.png\";\n\ntype LatLngLiteral = google.maps.LatLngLiteral;\ntype DirectionsResult = google.maps.DirectionsResult;\ntype MapOptions = google.maps.MapOptions;\n\n\n//Get CafeData from DataBase \nconst allCafes: {id: number, name: string, latlng: LatLngLiteral, categories: number[], stars: number}[] = [\n  {\"id\": 0, \"name\": \"Cafe Sur\", latlng: {lat: 50.882, lng: 6.921301}, \"categories\": [0,1,2], stars: 5},\n  {\"id\": 1, \"name\": \"Cafe del Norte\", latlng: {lat: 50.995173, lng: 6.863101}, \"categories\": [0,2], stars: 3},\n  {\"id\": 2, \"name\": \"Cafe de oeste\", latlng: {lat: 50.965173, lng: 6.903101}, \"categories\": [2,1], stars: 4.5},\n  {\"id\": 3, \"name\": \"Cafe de colonia\", latlng: {lat: 50.845173, lng: 6.953101}, \"categories\": [2], stars: 3.8},\n  {\"id\": 4, \"name\": \"Cafe de Alemania\", latlng: {lat: 50.995173, lng: 7.003101}, \"categories\": [1], stars: 2.1},\n  {\"id\": 5, \"name\": \"cruz del sur\", latlng: {lat: 50.735173, lng: 6.753101}, \"categories\": [], stars: 3.3},\n]; \n\n//Get Categories from Database\nconst categories: { id: number, name: string, definition: string }[] = [\n  { \"id\": 0, \"name\": \"Lactose-Free milk\", \"definition\": \"The cafe offers a lactose free alternative milk, this could include any lactose fre milk\"},\n  { \"id\": 1, \"name\": \"No disposable plastic\", \"definition\": \"The cafe does not use one-use plastic, this includes bags, cups, straws and more\"},\n  { \"id\": 2, \"name\": \"Fairtrade Coffee\", \"definition\":\"The cafe only uses Fairtrade coffee certified by either Fair Trade Original or Fair Trade Certified\"}\n]; \n\n\nvar numCategories = 5;     \nvar stateCheckBox = new Array(numCategories).fill(false);\n\nfunction checked_0(){\n  stateCheckBox[0] = !stateCheckBox[0];\n}\nfunction checked_1(){\n  stateCheckBox[1] = !stateCheckBox[1];\n}\nfunction checked_2(){\n  stateCheckBox[2] = !stateCheckBox[2];\n}\n\n\nexport default function Map() {\n  const [loc, setLoc] = useState<LatLngLiteral>();\n  const mapRef = useRef<GoogleMap>();\n  const center = useMemo<LatLngLiteral>(() => ({lat: 50.933594, lng: 6.961899}),[]);\n  const options = useMemo<MapOptions>(\n    () => ({\n      mapId: \"dddd1ac2f8095ba2\",\n      disableDefaultUI: true,\n      clickableIcon: false,\n      minZoom: 11,\n      maxZoom: 15,\n    }),\n    []\n  );\n\n  const getCafes = (position: LatLngLiteral) => {\n    let cafes = [];\n    for (let i = 0; i < allCafes.length; i++) {\n      let latDiff = Math.sqrt(Math.pow(allCafes[i].latlng.lat - position.lat, 2));\n      let lngDiff = Math.sqrt(Math.pow(allCafes[i].latlng.lng - position.lng, 2));\n      \n      if((latDiff < 0.1 && lngDiff < 0.1) && isInCategories(allCafes[i].categories)){\n        cafes.push(<Marker onClick={() => {setName(allCafes[i].name); setReviews(\"This cafe has \"+allCafes[i].stars +\" out of 5 Stars\");}} position={allCafes[i].latlng}/>);\n      }    \n    }\n    return cafes;\n  };\n  \n\n  \n\n  const onLoad = useCallback(map => (mapRef.current = map), []);\n  \n  const [name, setName] =  useState('');\n  const [reviews, setReviews] =  useState('');\n\n \n\n  return <div className=\"container\">\n    <div className=\"controls\">\n     \n      <h1 className=\"title\"><img className=\"titleIcon\" src=\"coffeeplusLOGO.png\"></img>CafePlus</h1>\n        <Places setLoc={(position) => {\n          setLoc(position);\n          mapRef.current?.panTo(position);\n        }} \n      />\n      <div className=\"containerCheckBoxen\">\n        <label className=\"containerCheckBox\">Lactose-Free Milk\n          <input type=\"checkbox\" onClick={checked_0}/>\n          <span className=\"checkmark\"></span>\n        </label>\n        <label className=\"containerCheckBox\">No disposable plastic\n          <input type=\"checkbox\" onClick={() => {checked_1;}}/>\n          <span className=\"checkmark\"></span>\n        </label>\n        <label className=\"containerCheckBox\">Fairtrade Coffee\n          <input type=\"checkbox\" onClick={checked_2}/>\n          <span className=\"checkmark\"></span>\n        </label>\n      </div>\n      <hr/>\n      <div className=\"cafe\">\n            <p>\n                    <h2>{name}</h2>\n                    {name != \"\" && <hr/>}\n                    {reviews}\n            </p>\n      </div>\n      <div className=\"logoutDiv\"><a href=\"../../index.html\" className=\"logout\"><svg className=\"logout\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\"><path d=\"M938,500c0,16.7-7,31.7-18.1,42l0,0L737.4,711.6v0c-9.7,9-22.5,14.5-36.6,14.5c-30.2,0-54.8-25.3-54.8-56.5c0-16.7,7-31.7,18.1-42l0,0l76.5-71.1H408.7l0,0c-30.2,0-54.8-25.3-54.8-56.5s24.5-56.5,54.8-56.5l0,0h331.8l-76.5-71v0c-11.1-10.3-18.1-25.3-18.1-42c0-31.2,24.5-56.5,54.8-56.5c14.1,0,26.9,5.5,36.6,14.5l0,0L919.9,458l0,0C931,468.3,938,483.3,938,500z M390.5,123.1h-219v753.8h219c30.2,0,54.8,25.3,54.8,56.5c0,31.2-24.5,56.5-54.8,56.5H116.7C86.5,990,62,964.7,62,933.5V66.5C62,35.3,86.5,10,116.7,10h273.8c30.2,0,54.8,25.3,54.8,56.5C445.2,97.8,420.7,123.1,390.5,123.1z\"></path></svg></a>    </div>\n          </div>\n    <div className=\"map\">\n     <GoogleMap \n      zoom={12} \n      center={center} \n      mapContainerClassName=\"map-container\"\n      options={options} \n      onLoad = {onLoad}\n     >\n       {loc && (\n        <><Marker\n        position={loc}\n        icon=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\"\n         />\n        {getCafes(loc)}\n      </>    \n       )}\n     </GoogleMap>\n     \n    </div>\n  </div>;\n}\n\nfunction isInCategories(categories: number[]){\n  for(let i = 0; i < stateCheckBox.length; i++){\n    if(stateCheckBox[i] && !categories.includes(i)) return false;\n  }   \n  return true;\n}\n\n\n\n\n","C:\\Users\\marlo\\coffePlus\\app\\components\\places.tsx",[],[],{"ruleId":"25","severity":1,"message":"26","line":91,"column":29,"nodeType":"27","endLine":91,"endColumn":81},{"ruleId":"28","severity":1,"message":"29","line":91,"column":29,"nodeType":"27","endLine":91,"endColumn":81},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]